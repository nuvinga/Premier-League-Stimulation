package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import utilities.DateUtility;
import utilities.comparators.CompareGoals;
import utilities.comparators.CompareWins;
import entities.Football.FootballClub;
import entities.SportsClub;
import play.libs.Json;
import play.mvc.*;
import services.LeagueManager;
import entities.Match;
import services.PremierLeagueManager;
import utilities.JsonResponseUtility;
import utilities.customErrors.InputFormatError;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

class GenMatch {
    String date;
    String winner;
    String runner;
    String  winnerScore;
    String runnerScore;
    boolean drawFlag;

    GenMatch(String date, String winner, String runner, int winnerScore, int runnerScore, boolean draw) {
        this.date = date; this.winner = winner; this.runner = runner; this.winnerScore = String.valueOf(winnerScore);
        this.runnerScore = String.valueOf(runnerScore); this.drawFlag = draw;
    }
}

public class HomeController extends Controller {

    private static final LeagueManager premierLeagueService = PremierLeagueManager.getInstance();
    private static List<FootballClub> clubs = new ArrayList<>();
    private static List<Match> matches = new ArrayList<>();

    /**
     *  FOR CLUBS_VIEW
     */
    public Result getClubs() {
        JsonNode jsonNode;
        try {
            premierLeagueService.loadSeasonStatus(); //Loads the data every time to make sure the latest data is used
            clubs = (((PremierLeagueManager) premierLeagueService).getFootballClubList()); //applying data from the new load to clubs arrayList
            clubs.sort(Collections.reverseOrder()); //sorting data according to points
            jsonNode = Json.toJson(clubs); //conversion of list to JSon Node
            return ok(JsonResponseUtility.createResponse(jsonNode, true)); //sending a true status to notify that the data is available
        }catch (Exception e) {
            return ok(JsonResponseUtility.createResponse(null, false)); //sending a false status to notify that the data is false
        }
    }

    public Result getWinsSortClubs() {
        JsonNode jsonNode;
        try {
            premierLeagueService.loadSeasonStatus();
            clubs = (((PremierLeagueManager) premierLeagueService).getFootballClubList());
            clubs.sort(new CompareWins().reversed()); //sorting data according to wins
            jsonNode = Json.toJson(clubs);
            return ok(JsonResponseUtility.createResponse(jsonNode, true));
        }catch (Exception e) {
            return ok(JsonResponseUtility.createResponse(null, false));
        }
    }

    public Result getGoalsSortClubs() {
        JsonNode jsonNode;
        try {
            premierLeagueService.loadSeasonStatus();
            clubs = (((PremierLeagueManager) premierLeagueService).getFootballClubList());
            clubs.sort(new CompareGoals().reversed()); //sorting data according to goals scored
            jsonNode = Json.toJson(clubs);
            return ok(JsonResponseUtility.createResponse(jsonNode, true));
        }catch (Exception e) {
            return ok(JsonResponseUtility.createResponse(null, false));
        }
    }

    /**
     *  FOR MATCHES VIEW
     */
    public Result getMatches() {
        JsonNode jsonNode;
        try {
            premierLeagueService.loadSeasonStatus();
            matches = (((PremierLeagueManager) premierLeagueService).getMatchList()); //getting the match list from the PL
            System.out.println(matches);
            jsonNode = Json.toJson(matches);
            return ok(JsonResponseUtility.createResponse(jsonNode, true));
        }catch (Exception e) {
            return ok(JsonResponseUtility.createResponse(null, false));
        }
    }

    /**
     *  FOR GENERATOR
     */
    public Result generateMatch() {
        JsonNode jsonNode;
        try {
            premierLeagueService.loadSeasonStatus(); //loading season to get the latest club data
            List<SportsClub> tempList = (((PremierLeagueManager) premierLeagueService).getClubList());
            if (tempList.size() > 1) {
                boolean validator = false;
                String finalDate;
                String finalClubOne;
                String finalClubTwo;
                int finalTeamOneScore;
                int finalTeamTwoScore;
                String returnString = "";
                GenMatch genMatch = null; //using custom interface to pass data to front end
                do {
                    Random random = new Random(); //plain random number generator
                    int year = random.nextInt(2) + ((PremierLeagueManager) premierLeagueService).getOldestClubYear();
                    // ^ the year is generated by accessing the oldest club, and allowing a span of 2 years to vary
                    do {
                        try {
                            int day = random.nextInt(31) + 1; //dates 1-31 (added one since generator starts at 0)
                            int month = random.nextInt(12) + 1; //months 1-12
                            finalDate = DateUtility.produceDate(String.valueOf(year), month, day); // getting correct date using utility
                            break;//breaks loop since is exception is thrown, would be already broken
                        }catch (InputFormatError ignored) { }
                    } while (true); //loops till date is perfectly generated

                    finalClubOne = tempList.get((random.nextInt(tempList.size()))).getName();
                    // ^ specifying generator bound to the size of the list and getting the name of the generated club
                    finalClubTwo = tempList.get((random.nextInt(tempList.size()))).getName();

                    finalTeamOneScore = random.nextInt(11) + 1;
                    finalTeamTwoScore = random.nextInt(11) + 1;
                    try {
                        returnString = premierLeagueService.playMatch(finalDate, finalClubOne, finalClubTwo, finalTeamOneScore, finalTeamTwoScore);
                        validator = true;
                    } catch (Exception ignored) { }
                } while (!validator);
                if (returnString.equals("one")) {
                    genMatch = new GenMatch(finalDate, finalClubOne, finalClubTwo, finalTeamOneScore, finalTeamTwoScore, false);
                }
                if (returnString.equals("two")) {
                    genMatch = new GenMatch(finalDate, finalClubTwo, finalClubOne, finalTeamTwoScore, finalTeamOneScore, false);
                }
                if (returnString.equals("draw")) {
                    genMatch = new GenMatch(finalDate, finalClubOne, finalClubTwo, finalTeamOneScore, finalTeamTwoScore, true);
                }
                premierLeagueService.saveSeasonStatus();
                jsonNode = Json.toJson(genMatch);
                return ok(JsonResponseUtility.createResponse(jsonNode, true));
            }else throw new Exception();
        }catch (Exception e) {
            return ok(JsonResponseUtility.createResponse(null, false));
        }
    }

    /**
     *  FOR SEARCH
     */
    public Result search(String date) {
        JsonNode jsonNode;
        try {
            System.out.println(date);
            premierLeagueService.loadSeasonStatus();
            matches = ((PremierLeagueManager) premierLeagueService).getMatchesForDate(date);
            System.out.println(matches);
            jsonNode = Json.toJson(matches);
            System.out.println(jsonNode);
            return ok(JsonResponseUtility.createResponse(jsonNode, true));
        }catch (Exception e) {
            return ok(JsonResponseUtility.createResponse(null, false));
        }
    }

}
